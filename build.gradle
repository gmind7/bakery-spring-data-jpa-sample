description = "Spring Data JPA Sample"

defaultTasks 'build'

ext {
    gradleScriptDir = "${rootProject.projectDir}/gradle"
}

buildscript {
	repositories {
		jcenter()
		mavenLocal()
		maven { url "http://repo.spring.io/plugins-release" }		
		maven { url "http://repo.spring.io/plugins-milestone" }
		maven { url "http://repo.spring.io/plugins-snapshot" }
	}
	dependencies {
		//classpath "com.gmind7.bakery:gmind7-gradle-plugin:0.0.1-RELEASE"
		classpath "org.gradle.api.plugins:gradle-tomcat-plugin:$gradleTomcatPluginVersion"
		classpath "org.gradle.api.plugins:gradle-cargo-plugin:$gradleCargoPluginVersion"
		classpath "org.springframework.build.gradle:bundlor-plugin:$gradleSpringBundlorPluginVersion"
	}
}

task wrapper(type: Wrapper) {
	description = "Generates gradlew[.bat] scripts"
	gradleVersion = "$gradleVersion"
  
	doLast() {
	  def gradleOpts = "-XX:MaxPermSize=1024m -Xmx1024m"
	  def gradleBatOpts = "$gradleOpts -XX:MaxHeapSize=256m"
	  File wrapperFile = file("gradlew")
	  wrapperFile.text = wrapperFile.text.replace("DEFAULT_JVM_OPTS=",
												  "GRADLE_OPTS=\"$gradleOpts \$GRADLE_OPTS\"\nDEFAULT_JVM_OPTS=")
	  File wrapperBatFile = file("gradlew.bat")
	  wrapperBatFile.text = wrapperBatFile.text.replace("set DEFAULT_JVM_OPTS=",
														"set GRADLE_OPTS=$gradleBatOpts %GRADLE_OPTS%\nset DEFAULT_JVM_OPTS=")
	}
}
/*
task testReport(type: TestReport) {
	destinationDir = file("$buildDir/reports/allTests")
	// Include the results from the `test` task in all subprojects
	reportOn subprojects*.test
}
*/
configure(allprojects) {
	
	apply plugin: "java"
	apply plugin: "idea"	
	apply plugin: "maven"
	apply plugin: "eclipse-wtp"
	apply from: "${gradleScriptDir}/tests.gradle"
	apply from: "${gradleScriptDir}/maven.gradle"
	apply from: "${gradleScriptDir}/ide.gradle"
    
	group = "${group}"
	version = "0.0.1-RELEASE"
	 
	configurations {
	  all {
		//Hack to let Gradle pickup latest SNAPSHOTS
		resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
		exclude group: "commons-logging"
          exclude group: "org.apache.avro"
		exclude module: "slf4j-log4j12"
		exclude module: "hibernate-jpa-2.0-api"
		crosstest
		testCompile.extendsFrom crosstest  // testCompile이 crosstest에 의존하게 변경
	  }
	}
	
	eclipse {
		classpath {
			minusConfigurations += configurations.crosstest // 불필요한 classpath 등록 방지
		}
	}
	
	project.sourceCompatibility = 1.7
	project.targetCompatibility = 1.7
	
	//[compileJava, compileTestJava]*.options*.compilerArgs = ["-proc:none", "-encoding", "UTF-8"]
	
	[compileJava, compileTestJava, javadoc]*.options*.encoding = "UTF-8"
  
	//sourceSets.test.resources.srcDirs = ["src/test/java", "src/test/resources"]
  
  	repositories {
	  mavenLocal()
	  mavenCentral()
	  maven { url "http://repo.spring.io/libs-release" }
	  maven { url "http://repo.spring.io/libs-milestone" }
	  maven { url "http://repo.spring.io/libs-snapshot" }
	  maven { url "https://repository.jboss.org/nexus/content/repositories/releases" }
	  maven { url "https://raw.github.com/gmind7/gmind7.maven.repository/master/lib-releases" }
	}
	  
    uploadArchives {
	  repositories.mavenDeployer {
	    repository(url: "file://D:/Git/gmind7.maven.repository/lib-releases")
	  }
    }
	
	dependencies {
	  // Logging
	  runtime "ch.qos.logback:logback-classic:$logbackVersion"
	  compile "org.slf4j:slf4j-api:$slf4jVersion"
	  runtime "org.slf4j:jcl-over-slf4j:$slf4jVersion"
	  compile "org.bgee.log4jdbc-log4j2:log4jdbc-log4j2-jdbc4:$log4j2Version"
	  
	  // Testing
	  testCompile "junit:junit:$junitVersion"
	  testCompile "org.hamcrest:hamcrest-library:$hamcrestVersion"
	  testCompile "com.jayway.jsonpath:json-path:$jsonpathVersion"
	  testCompile "org.mockito:mockito-core:$mockitoVersion"
	}
}

configure(subprojects) { subproject ->

	javadoc {
	  options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
	  options.author = true
	  options.header = subproject.name
	}
  
	task sourcesJar(type: Jar, dependsOn: classes) {
	  classifier = "sources"
	  from sourceSets.main.allJava
	}
	task javadocJar(type: Jar) {
	  classifier = "javadoc"
	  from javadoc
	}
  
	artifacts {
	  archives sourcesJar
	  archives javadocJar
	}

	dependencies {
	  // Gmind7
      compile("com.gmind7.bakery:bakery-spring-application-config:$bakerySpringApplicationVersion@jar") { force = true }
	  //compile("com.gmind7.bakery:bakery-spring-database-config:$bakeryDatabaseConfigVersion@jar") { force = true }
	  compile("com.gmind7.bakery:bakery-spring-infinispan-config:$bakerySpringInfinispanVersion@jar") { force = true }
  
	  // Spring
	  compile("org.springframework:spring-core:$springVersion") { force = true }
	  compile("org.springframework:spring-beans:$springVersion") { force = true }	
	  compile("org.springframework:spring-context:$springVersion") { force = true }
	  compile("org.springframework:spring-context-support:$springVersion") { force = true }
	  compile("org.springframework:spring-aop:$springVersion") { force = true }
	  compile("org.springframework:spring-aspects:$springVersion") { force = true }
      compile("org.springframework:spring-expression:$springVersion") { force = true }
	  compile("org.springframework:spring-tx:$springVersion") { force = true }
	  // Spring JPA
	  compile("org.springframework:spring-orm:$springVersion") { force = true }
	  compile("org.springframework:spring-jdbc:$springVersion") { force = true }
	  compile("org.springframework.data:spring-data-jpa:$springDataJpaVersion") { force=true }
	  
	  // AspectJ
	  compile "org.aspectj:aspectjrt:$aspectjVersion"
	  compile "org.aspectj:aspectjweaver:$aspectjVersion"
	  compile "aopalliance:aopalliance:$aopallianceVersion"
	  
	  // APIs
	  compile "javax.inject:javax.inject:$javaxInjectVersion"
	  
	  // Apache Commons
	  compile "org.apache.commons:commons-lang3:$apacheCommonsLang3Version"
	  compile "commons-io:commons-io:$apacheCommonsIOVersion"
	  compile "commons-fileupload:commons-fileupload:$apacheCommonsFileuploadVersion"
	  compile "commons-beanutils:commons-beanutils:$apacheCommonsBeanutilsVersion"
	  compile "commons-collections:commons-collections:$apacheCommonsCollectionsVersion"
	  compile "commons-configuration:commons-configuration:$apacheCommonsConfigurationVersion"
	  compile "commons-pool:commons-pool:$apacheCommonsPoolVersion"
	  
	  // JSR 303 with Hibernate Validator
	  compile "javax.validation:validation-api:$javaxValidationVersion"
	  compile "org.hibernate:hibernate-validator:$hibernateValidatorVersion"
	  
	  // RDBMS
	  runtime "org.hsqldb:hsqldb:$hsqldbVersion"
	  compile "org.apache.tomcat:tomcat-jdbc:$apacheTomcatVersion"
	  compile "mysql:mysql-connector-java:$mysqlConnectorVersion"
			 
	  // Hibernate
	  compile "org.hibernate:hibernate-entitymanager:$hibernateVersion"

	  // Mybatis
	  compile "org.mybatis:mybatis:$mybatisVersion"
	  compile "org.mybatis:mybatis-spring:$mybatisSpringVersion"
	  
	  // QueryDSL
	  compile "com.mysema.querydsl:querydsl-apt:$querydslVersion"
	  compile "com.mysema.querydsl:querydsl-jpa:$querydslVersion"
	  
	  // Ehcache
	  // compile "org.hibernate:hibernate-ehcache:$hibernateVersion"
	  // compile "net.sf.ehcache:ehcache-core:$ehcacheVersion"

      // Infinispan
      compile "org.infinispan:infinispan-core:$infinispanVersion"
      compile "org.infinispan:infinispan-client-hotrod:$infinispanVersion"
      compile "org.infinispan:infinispan-remote-query-client:$infinispanVersion"
      compile "org.infinispan:infinispan-query-dsl:$infinispanVersion"
      compile "org.infinispan:infinispan-spring:$infinispanVersion"
      compile "org.hibernate:hibernate-infinispan:$hibernateVersion"
	  
	  // Jackson
      compile "com.fasterxml.jackson.datatype:jackson-datatype-joda:$jacksonVersion"
      compile "com.fasterxml.jackson.datatype:jackson-datatype-hibernate4:$jacksonVersion"
	  
	  // Etc Supporting libraries
	  runtime "cglib:cglib-nodep:$cglibVersion"
	  compile "com.google.guava:guava:$guavaVersion"
	  compile "joda-time:joda-time:$jodaVersion"
	  compile "org.projectlombok:lombok:$lombokVersion"
	  
	  // Testing
      testCompile("org.springframework:spring-test:$springVersion") { force = true }
    }
}

project("spring-shared"){
    apply from: "${gradleScriptDir}/querydsl.gradle"
    dependencies {
	  // QueryDSL
	  querydslapt "com.mysema.querydsl:querydsl-apt:$querydslVersion"
	}
}

project("spring-data-jpa"){	
	dependencies {
  	  // Project
	  compile project(":spring-shared")
	  crosstest project(':spring-shared').sourceSets.test.output
	}
}

project("spring-web"){
	
	apply plugin: "war"
    apply plugin: "tomcat"
    apply plugin: "cargo"
	
	dependencies {
	  // Project
	  compile project(":spring-data-jpa")
	
      // Gmind7
      compile("com.gmind7.bakery:bakery-spring-web-api-config:$bakerySpringWebApiVersion") { force = true }
      compile("com.gmind7.bakery:bakery-spring-web-support:$bakerySpringWebSupportVersion") { force = true }
  
	  // Spring
	  compile("org.springframework:spring-web:$springVersion") { force = true }
	  compile("org.springframework:spring-webmvc:$springVersion") { force = true }
	  compile("org.springframework.hateoas:spring-hateoas:$springHateoasVersion") { force = true }
	  
	  // Apache Commons
	  compile "org.apache.httpcomponents:httpclient:$apacheHttpclientVersion"

	  // Tomcat
	  tomcat "org.apache.tomcat.embed:tomcat-embed-core:$tomcatVersion"
	  tomcat "org.apache.tomcat.embed:tomcat-embed-logging-juli:$tomcatVersion"
	  tomcat("org.apache.tomcat.embed:tomcat-embed-jasper:$tomcatVersion") {
		  exclude group: 'org.eclipse.jdt.core.compiler', module: 'ecj'
	  }
	  
	  // Cargo
	  cargo "org.codehaus.cargo:cargo-core-uberjar:$cargoVersion"
	  cargo "org.codehaus.cargo:cargo-ant:$cargoVersion"
	  
	  // Servlet
	  providedCompile "javax.servlet:javax.servlet-api:$javaxServletApiVersion"
	  providedCompile "javax.websocket:javax.websocket-api:$javaxWebSocketVersion"
	  providedCompile "javax.servlet:jsp-api:$javaxServletJspApiVersion"
	  providedCompile "org.apache.tomcat:tomcat-servlet-api:$tomcatVersion"
	  
	}

	cargo {
	  containerId = 'tomcat7x'
	  port = 9080
	}
}